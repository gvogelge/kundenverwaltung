@startuml kundenverwaltungssystem

abstract class Person{
    - id : int
    - name : String
    - strasse : String
    - hausnummer : String
    - ort : String
    - plz : String
    - anzahlBestellungen : int
    - bisherigesBestellvolumen : double
    {abstract} istPremiumkunde() : boolean
    {abstract} ermittleWichtigkeit() : double
    {abstract} datenAusgeben() : void
    + lieferePostanschrift() : String
    + ergaenzeBestellung(bestellnummer : String, bestellwert : double) : void
    + getId() : int
    + getName() : String
    + getStrasse() : String
    + getHausnummer() : String
    + getOrt() : String
    + getPlz() : String
    + getAnzahlBestellungen() : int
    + getBisherigesBestellvolumen() : double
}

class NatuerlichePerson extends Person{
    - anrede : String
    - geschlecht : char
    + bestellungZurueckgeben(bestellNummer : String, bestellWert : double) : void
    + istPremiumkunde() : boolean
    + ermittleWichtigkeit() : double
    + datenAusgeben() : void
    + getAnrede() : String
    + getGeschlecht() : char
}

class JuristischePerson extends Person{
    - rechtsform : String
    - istKapitalgesellschaft : boolean
    + istPremiumkunde() : boolean
    + ermittleWichtigkeit() : double
    + lieferePostanschrift() : String
    + datenAusgeben() : void
    + getRechtsform() : String
    + getIstKapitalgesellschaft() : boolean
}

class KundenVerwaltungsSystem {
    + {static} main(args: String[]) : void
    - erstelleTop10(kundenliste : <? extends Person>) : void
    - top10Ausgeben(kundenliste : ArrayList<? extends Person>) : void
    - sortiereKunden(kundenliste : ArrayList<Person>) : void
    - testStarten(testName : String) : void
    - testBeenden(testName : String) :void
}

KundenVerwaltungsSystem o-- Person

@enduml